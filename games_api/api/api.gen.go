// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns one exchange by ID.
	// (GET /exchanges/{id})
	GetExchangesId(c *gin.Context, id string)
	// Update the status of an exchange
	// (PATCH /exchanges/{id})
	PatchExchangesId(c *gin.Context, id string)
	// Create a new exchange
	// (POST /exchanges/{traderid}/{tradeeid})
	PostExchangesTraderidTradeeid(c *gin.Context, traderid string, tradeeid string)
	// Returns a list of all games
	// (GET /games)
	GetGames(c *gin.Context)
	// Adds a game to the list.
	// (POST /games)
	PostGames(c *gin.Context)
	// Removes a game from the exchange list.
	// (DELETE /games/{id})
	DeleteGamesId(c *gin.Context, id string)
	// Returns one game by ID.
	// (GET /games/{id})
	GetGamesId(c *gin.Context, id string)
	// Updates a property of a game.
	// (PATCH /games/{id})
	PatchGamesId(c *gin.Context, id string)
	// test the server
	// (GET /test)
	GetTest(c *gin.Context)
	// Returns a list of all users
	// (GET /users)
	GetUsers(c *gin.Context)
	// Adds a game to the list.
	// (POST /users)
	PostUsers(c *gin.Context)
	// Removes a user.
	// (DELETE /users/{id})
	DeleteUsersId(c *gin.Context, id string)
	// Returns one user by ID.
	// (GET /users/{id})
	GetUsersId(c *gin.Context, id string)
	// Updates a property of a user.
	// (PATCH /users/{id})
	PatchUsersId(c *gin.Context, id string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetExchangesId operation middleware
func (siw *ServerInterfaceWrapper) GetExchangesId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetExchangesId(c, id)
}

// PatchExchangesId operation middleware
func (siw *ServerInterfaceWrapper) PatchExchangesId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PatchExchangesId(c, id)
}

// PostExchangesTraderidTradeeid operation middleware
func (siw *ServerInterfaceWrapper) PostExchangesTraderidTradeeid(c *gin.Context) {

	var err error

	// ------------- Path parameter "traderid" -------------
	var traderid string

	err = runtime.BindStyledParameter("simple", false, "traderid", c.Param("traderid"), &traderid)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter traderid: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "tradeeid" -------------
	var tradeeid string

	err = runtime.BindStyledParameter("simple", false, "tradeeid", c.Param("tradeeid"), &tradeeid)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter tradeeid: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostExchangesTraderidTradeeid(c, traderid, tradeeid)
}

// GetGames operation middleware
func (siw *ServerInterfaceWrapper) GetGames(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetGames(c)
}

// PostGames operation middleware
func (siw *ServerInterfaceWrapper) PostGames(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostGames(c)
}

// DeleteGamesId operation middleware
func (siw *ServerInterfaceWrapper) DeleteGamesId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteGamesId(c, id)
}

// GetGamesId operation middleware
func (siw *ServerInterfaceWrapper) GetGamesId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetGamesId(c, id)
}

// PatchGamesId operation middleware
func (siw *ServerInterfaceWrapper) PatchGamesId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PatchGamesId(c, id)
}

// GetTest operation middleware
func (siw *ServerInterfaceWrapper) GetTest(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetTest(c)
}

// GetUsers operation middleware
func (siw *ServerInterfaceWrapper) GetUsers(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUsers(c)
}

// PostUsers operation middleware
func (siw *ServerInterfaceWrapper) PostUsers(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostUsers(c)
}

// DeleteUsersId operation middleware
func (siw *ServerInterfaceWrapper) DeleteUsersId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteUsersId(c, id)
}

// GetUsersId operation middleware
func (siw *ServerInterfaceWrapper) GetUsersId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUsersId(c, id)
}

// PatchUsersId operation middleware
func (siw *ServerInterfaceWrapper) PatchUsersId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PatchUsersId(c, id)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/exchanges/:id", wrapper.GetExchangesId)
	router.PATCH(options.BaseURL+"/exchanges/:id", wrapper.PatchExchangesId)
	router.POST(options.BaseURL+"/exchanges/:traderid/:tradeeid", wrapper.PostExchangesTraderidTradeeid)
	router.GET(options.BaseURL+"/games", wrapper.GetGames)
	router.POST(options.BaseURL+"/games", wrapper.PostGames)
	router.DELETE(options.BaseURL+"/games/:id", wrapper.DeleteGamesId)
	router.GET(options.BaseURL+"/games/:id", wrapper.GetGamesId)
	router.PATCH(options.BaseURL+"/games/:id", wrapper.PatchGamesId)
	router.GET(options.BaseURL+"/test", wrapper.GetTest)
	router.GET(options.BaseURL+"/users", wrapper.GetUsers)
	router.POST(options.BaseURL+"/users", wrapper.PostUsers)
	router.DELETE(options.BaseURL+"/users/:id", wrapper.DeleteUsersId)
	router.GET(options.BaseURL+"/users/:id", wrapper.GetUsersId)
	router.PATCH(options.BaseURL+"/users/:id", wrapper.PatchUsersId)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RYXW/jNhD8K8K2j/LHtVfgoLf0UgQuiiZok74EQcCIa5sHieSRlBMj8H8vuJRkO5Z8",
	"chLb8ZssUcvlzHA41jOkKtdKonQWkmew6RRzRpd/PKVTJifor7VRGo0TSE8mLEfB/ZWba4QErDNCTiCG",
	"p95E9cqb2ohcODHD/uXDN0zd6Hx1QE/kWhlHxZmbQgIT1c+VnCj+0FdmMqDrHjdihmbwYJUc1AVh4Qsp",
	"pkUvVRwnKHv45AzrOTahBv1wSOBe8FjlwmGu3RwWixhOs2vrmCtoCMoih+QWNEoeemdpitohhxg4ppmQ",
	"yOEufrHERQzOMI4nyhr1bk6x90XNhKKOfJ0LljfsqVRJLpzwVZY050I6iGGilOd3zISBGLRSppHi0yRX",
	"lnBsLEc9ytMkPQZdPGTCTtE0Lsxghszi/RxZ04AmzdzYUGtdM5gzkTVO4R2ahviu6OJng2NI4KfB0u8H",
	"pdkPSJHLaZkxbH66gtLM2kdleCMw1hlEd884N2ht45DComkR5SY1dKjIsaLBwmX+2X+Co4o8qFF1hkZn",
	"V6OoF11qlP7q1/6wP4QYZmgsbXn4RHe86jVKpgUkUA3y0FGnAyyr2cGz4As6iZHQ9aJg3jxGHBK4QFfN",
	"a0ecKhiWo0NjIbl9Bo42NUIHs4HrKUZV4Wh03ge/IE+tZ6zanl4KXrjfC2GQQ+JMgXEZFppwuvODrVbS",
	"Bhn+MhyWJudQUstM60yk1PTgmw22t6y3Ta11LiHw1xfz57+Xf0dqHLkpRmNVSF4vre/B/Tz87Kuvv1Nz",
	"JJULL/XDqVvkOTNzSOAfdIWRNlJyBaqHeYlWEOQtVE/gjkTo0ukmNVf+9ocg53uB1v2u+HwnXtb95+25",
	"pHlDrS9lcSQt1booNGcOeWSLNEVrx0WWzd8ipxuqRxoNCHrFMlkT3aypRbxmAFUmWpSXWDqCVrbBEq6U",
	"XXrCdfnqdRUJO4gwTNcuwTqi7SLEuHUm/MFMeCzJt/31eaWSPx1WyanBNiUPN5U8kjOWCR4JqQtKIb81",
	"j3L+vMwii2aGJkJjlHmh+K80b8QiiY8dZF6nl7bj7YIG7NEXQiLaRPIsohOGEpLftaHT/QNYnUAsyoR1",
	"5BdZVs6+hDH8puOn1QWW0L1uO3RD7XC6b2OK4hfj/AhqP+PcM+XZiJwin/es9RuYqtVeJzqOGTrc5O6c",
	"7hN73WIDTb+/PNdw8hHkBnM163xY0itbcpevVWM5NionNOtE1AZrvN05PgSA+zerzTDsl7TDDngVZcuo",
	"TABuxOQVk9qSkY/K03sEhbU+G/5l7vQP83CBeKud7haEtwslhGC/t0vc6DxlpUSbndJhONXaNve1f94M",
	"zgvZoHUrq3jRmp8mpHPy+JVmqIHQS2FJke3N3NCAPVJF34Q6ZJTQ6bEySlHCUEEYfm/PKEvo3j+jLFE7",
	"XEZpY+pjZ5SKqVrtHTMKsdfNun3Zw2YU39yOGYVe6ZBR/GL6jUrfahEfAqn9u9JmGAl4vS2M/IibZRgh",
	"ADfCyIobbQkjR+XpPcLI1k/iO3/vPlwaaRMT0b5bGim2KqUtjbTtaXqb3DUIoTAZJPCXSlk2VdYlX4Zf",
	"huD5K1982c1XJR0Ta4clBZ04YpJHLPXDbDBm5mpnLlVUfXToUJT67VS0SgkditZfITsVrr/tLO4W/wcA",
	"AP//g/6eqm4gAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
