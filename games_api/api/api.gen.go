// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Removes an exchange.
	// (DELETE /exchanges/{ownerEmail}/{exchangeid})
	DeleteExchangesOwnerEmailExchangeid(c *gin.Context, ownerEmail string, exchangeid string)
	// Returns one exchange by ID.
	// (GET /exchanges/{ownerEmail}/{exchangeid})
	GetExchangesOwnerEmailExchangeid(c *gin.Context, ownerEmail string, exchangeid string)
	// Update the status of an exchange
	// (PATCH /exchanges/{ownerEmail}/{exchangeid})
	PatchExchangesOwnerEmailExchangeid(c *gin.Context, ownerEmail string, exchangeid string)
	// Create a new exchange
	// (POST /exchanges/{trader_email}/{tradee_email})
	PostExchangesTraderEmailTradeeEmail(c *gin.Context, traderEmail string, tradeeEmail string)
	// Returns a list of all games
	// (GET /games)
	GetGames(c *gin.Context)
	// Adds a game to the list.
	// (POST /games)
	PostGames(c *gin.Context)
	// Removes a game from the exchange list.
	// (DELETE /games/{id})
	DeleteGamesId(c *gin.Context, id string)
	// Returns one game by ID.
	// (GET /games/{id})
	GetGamesId(c *gin.Context, id string)
	// Updates a property of a game.
	// (PATCH /games/{id})
	PatchGamesId(c *gin.Context, id string)
	// Returns a list of all users
	// (GET /users)
	GetUsers(c *gin.Context)
	// Adds a game to the list.
	// (POST /users)
	PostUsers(c *gin.Context)
	// Removes a user.
	// (DELETE /users/{id})
	DeleteUsersId(c *gin.Context, id string)
	// Returns one user by ID.
	// (GET /users/{id})
	GetUsersId(c *gin.Context, id string)
	// Updates a property of a user.
	// (PATCH /users/{id})
	PatchUsersId(c *gin.Context, id string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// DeleteExchangesOwnerEmailExchangeid operation middleware
func (siw *ServerInterfaceWrapper) DeleteExchangesOwnerEmailExchangeid(c *gin.Context) {

	var err error

	// ------------- Path parameter "ownerEmail" -------------
	var ownerEmail string

	err = runtime.BindStyledParameterWithOptions("simple", "ownerEmail", c.Param("ownerEmail"), &ownerEmail, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ownerEmail: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "exchangeid" -------------
	var exchangeid string

	err = runtime.BindStyledParameterWithOptions("simple", "exchangeid", c.Param("exchangeid"), &exchangeid, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter exchangeid: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteExchangesOwnerEmailExchangeid(c, ownerEmail, exchangeid)
}

// GetExchangesOwnerEmailExchangeid operation middleware
func (siw *ServerInterfaceWrapper) GetExchangesOwnerEmailExchangeid(c *gin.Context) {

	var err error

	// ------------- Path parameter "ownerEmail" -------------
	var ownerEmail string

	err = runtime.BindStyledParameterWithOptions("simple", "ownerEmail", c.Param("ownerEmail"), &ownerEmail, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ownerEmail: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "exchangeid" -------------
	var exchangeid string

	err = runtime.BindStyledParameterWithOptions("simple", "exchangeid", c.Param("exchangeid"), &exchangeid, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter exchangeid: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetExchangesOwnerEmailExchangeid(c, ownerEmail, exchangeid)
}

// PatchExchangesOwnerEmailExchangeid operation middleware
func (siw *ServerInterfaceWrapper) PatchExchangesOwnerEmailExchangeid(c *gin.Context) {

	var err error

	// ------------- Path parameter "ownerEmail" -------------
	var ownerEmail string

	err = runtime.BindStyledParameterWithOptions("simple", "ownerEmail", c.Param("ownerEmail"), &ownerEmail, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ownerEmail: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "exchangeid" -------------
	var exchangeid string

	err = runtime.BindStyledParameterWithOptions("simple", "exchangeid", c.Param("exchangeid"), &exchangeid, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter exchangeid: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PatchExchangesOwnerEmailExchangeid(c, ownerEmail, exchangeid)
}

// PostExchangesTraderEmailTradeeEmail operation middleware
func (siw *ServerInterfaceWrapper) PostExchangesTraderEmailTradeeEmail(c *gin.Context) {

	var err error

	// ------------- Path parameter "trader_email" -------------
	var traderEmail string

	err = runtime.BindStyledParameterWithOptions("simple", "trader_email", c.Param("trader_email"), &traderEmail, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter trader_email: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "tradee_email" -------------
	var tradeeEmail string

	err = runtime.BindStyledParameterWithOptions("simple", "tradee_email", c.Param("tradee_email"), &tradeeEmail, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter tradee_email: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostExchangesTraderEmailTradeeEmail(c, traderEmail, tradeeEmail)
}

// GetGames operation middleware
func (siw *ServerInterfaceWrapper) GetGames(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetGames(c)
}

// PostGames operation middleware
func (siw *ServerInterfaceWrapper) PostGames(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostGames(c)
}

// DeleteGamesId operation middleware
func (siw *ServerInterfaceWrapper) DeleteGamesId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteGamesId(c, id)
}

// GetGamesId operation middleware
func (siw *ServerInterfaceWrapper) GetGamesId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetGamesId(c, id)
}

// PatchGamesId operation middleware
func (siw *ServerInterfaceWrapper) PatchGamesId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PatchGamesId(c, id)
}

// GetUsers operation middleware
func (siw *ServerInterfaceWrapper) GetUsers(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUsers(c)
}

// PostUsers operation middleware
func (siw *ServerInterfaceWrapper) PostUsers(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostUsers(c)
}

// DeleteUsersId operation middleware
func (siw *ServerInterfaceWrapper) DeleteUsersId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteUsersId(c, id)
}

// GetUsersId operation middleware
func (siw *ServerInterfaceWrapper) GetUsersId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUsersId(c, id)
}

// PatchUsersId operation middleware
func (siw *ServerInterfaceWrapper) PatchUsersId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PatchUsersId(c, id)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.DELETE(options.BaseURL+"/exchanges/:ownerEmail/:exchangeid", wrapper.DeleteExchangesOwnerEmailExchangeid)
	router.GET(options.BaseURL+"/exchanges/:ownerEmail/:exchangeid", wrapper.GetExchangesOwnerEmailExchangeid)
	router.PATCH(options.BaseURL+"/exchanges/:ownerEmail/:exchangeid", wrapper.PatchExchangesOwnerEmailExchangeid)
	router.POST(options.BaseURL+"/exchanges/:trader_email/:tradee_email", wrapper.PostExchangesTraderEmailTradeeEmail)
	router.GET(options.BaseURL+"/games", wrapper.GetGames)
	router.POST(options.BaseURL+"/games", wrapper.PostGames)
	router.DELETE(options.BaseURL+"/games/:id", wrapper.DeleteGamesId)
	router.GET(options.BaseURL+"/games/:id", wrapper.GetGamesId)
	router.PATCH(options.BaseURL+"/games/:id", wrapper.PatchGamesId)
	router.GET(options.BaseURL+"/users", wrapper.GetUsers)
	router.POST(options.BaseURL+"/users", wrapper.PostUsers)
	router.DELETE(options.BaseURL+"/users/:id", wrapper.DeleteUsersId)
	router.GET(options.BaseURL+"/users/:id", wrapper.GetUsersId)
	router.PATCH(options.BaseURL+"/users/:id", wrapper.PatchUsersId)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RZ3W7bOBN9FYLfdyn/dLcLFL7rtkHgxWIT7DZ7UwQBI45tFhLJkpQTw9C7L2b0YzuS",
	"HDmN4wS9kxVqyDnnzMyRsuaxSa3RoIPnkzX38QJSQZdn9/FC6DngtXXGggsK6C9zkYKSeBVWFviE++CU",
	"nvOI3w/mZlDetE6lKqglDC9uv0Ecpp+3FwxUao0LFFyEBZ/wuRmmRs+NvB0aNx/R9UA6tQQ3uvVGj+qA",
	"PMdARlg1iI2EOegB3AcnBkHM6YC4HCOKFG6UjEyqAqQ2rHieR/wtnLx5ah9EyHzz5HnEgxMS4AZSoZLu",
	"Ba5zAa4o7hhKFx85F2kL8bHRUgWFR2zZ5m0Cq8tMG+mYOw3uLeRUHvRBXja7TZRfgGtNzkECwsPNCoTr",
	"KYkrX8TalUS36t6mHKzw/s442ZqSDw4g3AgpHfj2Ysw8uA5JNUGldqRnhharkODf/lUSDMP6Y1UHZh8v",
	"p2zALixovPp1OB6OecSX4DzVIn9Hd1CzFrSwik94tQiho5OOoIzmR2tSzBkyl4/W1X0lc1wnIYFAx0ea",
	"BVb7VPIJ/0z3qyP5izrEWf08bedECgGc55OvGMzHTtmiZfAvC2DVbmz6ecgxe9QB0ltVIofteA6+Z8qB",
	"5JPgMojK+dQK7rot2CbTg4Jd42JvjfaFyn8Zvy+w2U6npsdBapYgmc/iGLyfZUmyGiId7/c+pk1gM5Np",
	"OSw6fJamwq34hP9N8TwTuoYLsSq0+7UGiF/nEZ9DaHJ1DuGnJWpcDqoAmpAR1iYqJmxG33wxujbx/u9g",
	"xif8f6ONDRqVHmhUGyCq012E/vjn4i9mZiwsoOBwi6kfIT5kTntm9Bb+t6uSglb+rQjxoqmAS7z9M2ng",
	"ewY+/G7k6iD6d2fZxmOBzlKE2oKWxdwScQw2AKYpIU6UBsmvo34tfjeV/ESSreWXWSnCM7arK4pHpVAg",
	"iIWx1bvapZtHOyNp26Pm5c/S09JYssa3NLpL4zed7guFIP3QJVRSelTnxebdKt8x0AfqvGM3eGQ3eMJu",
	"z1YIXS94T9T3u5fVd+ygS9/jpr6neikSJZnSNiOf+1v7qoC+LmEe3BIcA+eMe1AHn2hfJpiGux7iR5AL",
	"tDtG+DktOGK3oJe8FiQ/MhpvwjmxwlouTnp8AKvxJ1iifKAukiTl7hsYi980+zp7wga6p5VDP9ReTvdd",
	"TNFrgpDyBGr/KCUyhWywYKj7I2vDFqZqtY/WvV4yiL1pL4dC23d20gNdSS/XT5Af5vjpkcfdfpHMzJmU",
	"0KzNVxes0f7O8SoAPH6zajpxTOmACngSZRufTgA2PPpWk9pj0E/K03Ec80woxyM+NwaPlCodMDtj3Ct0",
	"y3u76mEueb9eCoeMJV7CR2NVlEptb5iZJzF024MrWnBEeOiDXw97UJz0VPYgK2GoMCx+77cHG+ie3x5s",
	"UHs5e9DF1Ou2BxVTtdp72gNir1/XxLAvaw/wcAfaA3qkhz3AZIatSt/bIl4FUsfvSk0fUOD1Yz7gMW42",
	"PoAAbPiArW60xweclKfn8AF7/mty6iHfpRdi9rAhn+0VQ9eQ7ypbepoaaMF15hI+4X+aWCQL48Pkw/jD",
	"mCNF5YMPT/PJ6CDUzjwk/xAxoSUTMS7zRe8VoW6+pVCqV/oeQem8vYJWRqBH0PrLX6/A9ZeT9thKaM9S",
	"CE7Fns2MQwJSCAvI/FaQcgHPr/P/AgAA//9iG0KJ9iAAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
